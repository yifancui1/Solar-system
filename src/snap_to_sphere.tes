// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform int planet_id;

// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  mat4 VM = view * model(planet_id, animation_seconds);

  mat4 PVM =  proj * VM;
  vec4 interp_pos = interpolate(gl_TessCoord, 
                    vec4(normalize(pos_es_in[0].xyz),1.0), 
                    vec4(normalize(pos_es_in[1].xyz),1.0), 
                    vec4(normalize(pos_es_in[2].xyz),1.0));
  vec4 new_interp_pos = vec4(normalize(interp_pos.xyz), 1.0);

  sphere_fs_in = normalize(vec3(new_interp_pos));
  
  pos_fs_in = PVM*vec4(sphere_fs_in,1.0);

  view_pos_fs_in = VM*vec4(sphere_fs_in,1.0);

  normal_fs_in = normalize((VM*vec4(normalize(sphere_fs_in), 0.0)).xyz);
  

  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}


